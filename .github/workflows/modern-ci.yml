name: Modern CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ZELLIJ_VERSION: "v0.42.2"
  
jobs:
  lint:
    name: Lint and Style Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check shell scripts syntax
      run: |
        find . -name "*.sh" -type f | xargs -I {} bash -n {}
        echo "✓ All shell scripts have valid syntax"
        
    - name: Check shell style with shellcheck
      run: |
        sudo apt-get update && sudo apt-get install -y shellcheck
        find . -name "*.sh" -type f | xargs shellcheck || echo "⚠️ Style warnings found"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shell: [bash, zsh]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git bc curl wget zsh
        
        # Install Zellij
        curl -L "https://github.com/zellij-org/zellij/releases/download/${ZELLIJ_VERSION}/zellij-x86_64-unknown-linux-musl.tar.gz" -o /tmp/zellij.tar.gz
        tar -xzf /tmp/zellij.tar.gz -C /tmp
        sudo mv /tmp/zellij /usr/local/bin/
        chmod +x /usr/local/bin/zellij
        
    - name: Test core functions (${{ matrix.shell }})
      shell: ${{ matrix.shell }}
      run: |
        source scripts/zellij-utils.sh
        
        # Test function loading
        type zj >/dev/null && echo "✓ zj function loaded"
        type zjl >/dev/null && echo "✓ zjl function loaded"
        
        # Test session management (minimal)
        export ZJ_DISABLE_AUTO=1
        zellij --version
        
        echo "✓ Core functions work in ${{ matrix.shell }}"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git bc curl wget
        
        # Install Zellij
        curl -L "https://github.com/zellij-org/zellij/releases/download/${ZELLIJ_VERSION}/zellij-x86_64-unknown-linux-musl.tar.gz" -o /tmp/zellij.tar.gz
        tar -xzf /tmp/zellij.tar.gz -C /tmp
        sudo mv /tmp/zellij /usr/local/bin/
        chmod +x /usr/local/bin/zellij
        
    - name: Test installation process
      run: |
        export ZJ_DISABLE_AUTO=1
        # Test dry run installation
        mkdir -p ~/.config/shell ~/.config/zellij
        cp scripts/zellij-utils.sh ~/.config/shell/
        cp layouts/*.kdl ~/.config/zellij/ 2>/dev/null || true
        cp config-examples/config.kdl ~/.config/zellij/config.kdl 2>/dev/null || true
        
        echo "✓ Installation simulation complete"
        
    - name: Test session workflow
      run: |
        export ZJ_DISABLE_AUTO=1
        export ZJ_TEST_MODE=1
        source scripts/zellij-utils.sh
        
        # Create test session (detached)
        timeout 30 zellij -d -s ci-test || echo "Session creation attempted"
        
        # Try to list sessions
        zellij list-sessions || echo "No sessions found"
        
        # Cleanup
        zellij kill-all-sessions 2>/dev/null || true
        
        echo "✓ Session workflow tested"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security checks
      run: |
        # Check for hardcoded secrets
        ! grep -r "password\|secret\|token" --include="*.sh" . | grep -v "example"
        
        # Check for unsafe commands
        ! grep -r "rm -rf /" --include="*.sh" .
        ! grep -r "eval.*\$" --include="*.sh" .
        
        echo "✓ Basic security checks passed"

  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint.result }}" == "success" ]]; then
          echo "✅ Lint checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Lint checks failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ Security scan passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security scan failed" >> $GITHUB_STEP_SUMMARY
        fi